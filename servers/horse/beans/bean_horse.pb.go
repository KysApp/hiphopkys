// Code generated by protoc-gen-gogo.
// source: bean_horse.proto
// DO NOT EDIT!

/*
	Package beans is a generated protocol buffer package.

	It is generated from these files:
		bean_horse.proto

	It has these top-level messages:
		CreateRoomBean
		JoinRoomBean
		PlayerDeviceBean
		PlagerJoinGameBean
		PlayerLeaveGameBean
		HorseSpeedBean
		ServerResponseCreateRoomBean
		ServerResponseJoinRoomBean
		ServerSendBean
		ClientRequestBean
*/
package beans

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// client -> server
type RequestOperationCode int32

const (
	RequestOperationCode_REQUEST_OPERATIONCODE_PLAYERDEVICCEBEAN RequestOperationCode = 0
	RequestOperationCode_REQUEST_OPERATIONCODE_CREATEROOM        RequestOperationCode = 1
	RequestOperationCode_REQUEST_OPERATIONCODE_JOINROOM          RequestOperationCode = 2
)

var RequestOperationCode_name = map[int32]string{
	0: "REQUEST_OPERATIONCODE_PLAYERDEVICCEBEAN",
	1: "REQUEST_OPERATIONCODE_CREATEROOM",
	2: "REQUEST_OPERATIONCODE_JOINROOM",
}
var RequestOperationCode_value = map[string]int32{
	"REQUEST_OPERATIONCODE_PLAYERDEVICCEBEAN": 0,
	"REQUEST_OPERATIONCODE_CREATEROOM":        1,
	"REQUEST_OPERATIONCODE_JOINROOM":          2,
}

func (x RequestOperationCode) String() string {
	return proto.EnumName(RequestOperationCode_name, int32(x))
}

// *
// server -> client
type SendMessageOperationCode int32

const (
	SendMessageOperationCode_SENDMESSAGE_OPERATIONCODE_RESPONSE                SendMessageOperationCode = 0
	SendMessageOperationCode_SENDMESSAGE_OPERATIONCODE_RESPONSE_PLAYERJOINBEAN SendMessageOperationCode = 1
	SendMessageOperationCode_SENDMESSAGE_OPERATIONCODE_PLAYERJOINGAME          SendMessageOperationCode = 2
	SendMessageOperationCode_SENDMESSAGE_OPERATIONCODE_PLAYERDEVICE            SendMessageOperationCode = 3
	SendMessageOperationCode_SENDMESSAGE_OPERATIONCODE_HORSEGAME_SPEED         SendMessageOperationCode = 4
)

var SendMessageOperationCode_name = map[int32]string{
	0: "SENDMESSAGE_OPERATIONCODE_RESPONSE",
	1: "SENDMESSAGE_OPERATIONCODE_RESPONSE_PLAYERJOINBEAN",
	2: "SENDMESSAGE_OPERATIONCODE_PLAYERJOINGAME",
	3: "SENDMESSAGE_OPERATIONCODE_PLAYERDEVICE",
	4: "SENDMESSAGE_OPERATIONCODE_HORSEGAME_SPEED",
}
var SendMessageOperationCode_value = map[string]int32{
	"SENDMESSAGE_OPERATIONCODE_RESPONSE":                0,
	"SENDMESSAGE_OPERATIONCODE_RESPONSE_PLAYERJOINBEAN": 1,
	"SENDMESSAGE_OPERATIONCODE_PLAYERJOINGAME":          2,
	"SENDMESSAGE_OPERATIONCODE_PLAYERDEVICE":            3,
	"SENDMESSAGE_OPERATIONCODE_HORSEGAME_SPEED":         4,
}

func (x SendMessageOperationCode) String() string {
	return proto.EnumName(SendMessageOperationCode_name, int32(x))
}

// *
// client -> server
// 创建房间
type CreateRoomBean struct {
	GameId     string  `protobuf:"bytes,1,opt,name=game_id,proto3" json:"game_id,omitempty"`
	Longitude  float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude   float64 `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	DeviceInfo string  `protobuf:"bytes,5,opt,name=device_info,proto3" json:"device_info,omitempty"`
}

func (m *CreateRoomBean) Reset()         { *m = CreateRoomBean{} }
func (m *CreateRoomBean) String() string { return proto.CompactTextString(m) }
func (*CreateRoomBean) ProtoMessage()    {}

// *
// client -> server
// 申请加入房间
type JoinRoomBean struct {
	GameId       string  `protobuf:"bytes,1,opt,name=game_id,proto3" json:"game_id,omitempty"`
	PlayerTocken string  `protobuf:"bytes,2,opt,name=player_tocken,proto3" json:"player_tocken,omitempty"`
	Longitude    float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude     float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Ip           string  `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	DeviceInfo   string  `protobuf:"bytes,6,opt,name=device_info,proto3" json:"device_info,omitempty"`
}

func (m *JoinRoomBean) Reset()         { *m = JoinRoomBean{} }
func (m *JoinRoomBean) String() string { return proto.CompactTextString(m) }
func (*JoinRoomBean) ProtoMessage()    {}

// *
// client -> server
// server -> client
// player_client端陀螺仪信息
type PlayerDeviceBean struct {
	PlayerId   string  `protobuf:"bytes,11,opt,name=player_id,proto3" json:"player_id,omitempty"`
	PlayerName string  `protobuf:"bytes,13,opt,name=player_name,proto3" json:"player_name,omitempty"`
	GameId     string  `protobuf:"bytes,10,opt,name=game_id,proto3" json:"game_id,omitempty"`
	RoomId     string  `protobuf:"bytes,12,opt,name=room_id,proto3" json:"room_id,omitempty"`
	AngleAlpha float64 `protobuf:"fixed64,1,opt,name=angle_alpha,proto3" json:"angle_alpha,omitempty"`
	AngleBeta  float64 `protobuf:"fixed64,2,opt,name=angle_beta,proto3" json:"angle_beta,omitempty"`
	AngleGamma float64 `protobuf:"fixed64,3,opt,name=angle_gamma,proto3" json:"angle_gamma,omitempty"`
	AcceX      float64 `protobuf:"fixed64,4,opt,name=acce_x,proto3" json:"acce_x,omitempty"`
	AcceY      float64 `protobuf:"fixed64,5,opt,name=acce_y,proto3" json:"acce_y,omitempty"`
	AcceZ      float64 `protobuf:"fixed64,6,opt,name=acce_z,proto3" json:"acce_z,omitempty"`
	AcceAlpha  float64 `protobuf:"fixed64,7,opt,name=acce_alpha,proto3" json:"acce_alpha,omitempty"`
	AcceBeta   float64 `protobuf:"fixed64,8,opt,name=acce_beta,proto3" json:"acce_beta,omitempty"`
	AcceGamma  float64 `protobuf:"fixed64,9,opt,name=acce_gamma,proto3" json:"acce_gamma,omitempty"`
}

func (m *PlayerDeviceBean) Reset()         { *m = PlayerDeviceBean{} }
func (m *PlayerDeviceBean) String() string { return proto.CompactTextString(m) }
func (*PlayerDeviceBean) ProtoMessage()    {}

// *
// server -> client
// player_client加入游戏后，server向game_client发送的新加入的player_client的信息
type PlagerJoinGameBean struct {
	PlayerId     string `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	PlayerTocken string `protobuf:"bytes,2,opt,name=player_tocken,proto3" json:"player_tocken,omitempty"`
	PlayerName   string `protobuf:"bytes,3,opt,name=player_name,proto3" json:"player_name,omitempty"`
	PlayerLevel  int32  `protobuf:"varint,4,opt,name=player_level,proto3" json:"player_level,omitempty"`
}

func (m *PlagerJoinGameBean) Reset()         { *m = PlagerJoinGameBean{} }
func (m *PlagerJoinGameBean) String() string { return proto.CompactTextString(m) }
func (*PlagerJoinGameBean) ProtoMessage()    {}

// *
// server -> client
// player_client离开游戏后server向game_client发送的离开房间的player_client的信息
type PlayerLeaveGameBean struct {
	PlayerId    string `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	PlayerName  string `protobuf:"bytes,2,opt,name=player_name,proto3" json:"player_name,omitempty"`
	PlayerLevel int32  `protobuf:"varint,3,opt,name=player_level,proto3" json:"player_level,omitempty"`
}

func (m *PlayerLeaveGameBean) Reset()         { *m = PlayerLeaveGameBean{} }
func (m *PlayerLeaveGameBean) String() string { return proto.CompactTextString(m) }
func (*PlayerLeaveGameBean) ProtoMessage()    {}

// *
// server -> client
// 赛马游戏中马的速度
type HorseSpeedBean struct {
	PlayerId    string  `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	PlayerName  string  `protobuf:"bytes,2,opt,name=player_name,proto3" json:"player_name,omitempty"`
	PlayerLevel int32   `protobuf:"varint,3,opt,name=player_level,proto3" json:"player_level,omitempty"`
	PlayerSpeed float64 `protobuf:"fixed64,4,opt,name=player_speed,proto3" json:"player_speed,omitempty"`
}

func (m *HorseSpeedBean) Reset()         { *m = HorseSpeedBean{} }
func (m *HorseSpeedBean) String() string { return proto.CompactTextString(m) }
func (*HorseSpeedBean) ProtoMessage()    {}

// *
// 针对game_client创建房间请求的响应
type ServerResponseCreateRoomBean struct {
	MaxCount int32  `protobuf:"varint,1,opt,name=max_count,proto3" json:"max_count,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=room_id,proto3" json:"room_id,omitempty"`
}

func (m *ServerResponseCreateRoomBean) Reset()         { *m = ServerResponseCreateRoomBean{} }
func (m *ServerResponseCreateRoomBean) String() string { return proto.CompactTextString(m) }
func (*ServerResponseCreateRoomBean) ProtoMessage()    {}

// *
// 针对player_client申请加入房间的响应
type ServerResponseJoinRoomBean struct {
	RoomId   string `protobuf:"bytes,1,opt,name=room_id,proto3" json:"room_id,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,proto3" json:"player_id,omitempty"`
}

func (m *ServerResponseJoinRoomBean) Reset()         { *m = ServerResponseJoinRoomBean{} }
func (m *ServerResponseJoinRoomBean) String() string { return proto.CompactTextString(m) }
func (*ServerResponseJoinRoomBean) ProtoMessage()    {}

// *
// server -> client
// server向client发送的数据(响应，玩家加入与离开，玩家陀螺仪数据等)
type ServerSendBean struct {
	ResultCode string                   `protobuf:"bytes,1,opt,name=result_code,proto3" json:"result_code,omitempty"`
	RequestId  string                   `protobuf:"bytes,2,opt,name=request_id,proto3" json:"request_id,omitempty"`
	Desc       string                   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	OptionCode SendMessageOperationCode `protobuf:"varint,4,opt,name=option_code,proto3,enum=beans.SendMessageOperationCode" json:"option_code,omitempty"`
	// Types that are valid to be assigned to Bean:
	//	*ServerSendBean_ResponseCreateroomBean
	//	*ServerSendBean_ResponseJoinroomBean
	//	*ServerSendBean_PlayerJoinBean
	//	*ServerSendBean_PlayerLevelBean
	//	*ServerSendBean_PlayerDeviceBean
	//	*ServerSendBean_PlayerHorsesgameSpeedBean
	Bean isServerSendBean_Bean `protobuf_oneof:"Bean"`
}

func (m *ServerSendBean) Reset()         { *m = ServerSendBean{} }
func (m *ServerSendBean) String() string { return proto.CompactTextString(m) }
func (*ServerSendBean) ProtoMessage()    {}

type isServerSendBean_Bean interface {
	isServerSendBean_Bean()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServerSendBean_ResponseCreateroomBean struct {
	ResponseCreateroomBean *ServerResponseCreateRoomBean `protobuf:"bytes,5,opt,name=response_createroom_bean,oneof"`
}
type ServerSendBean_ResponseJoinroomBean struct {
	ResponseJoinroomBean *ServerResponseJoinRoomBean `protobuf:"bytes,6,opt,name=response_joinroom_bean,oneof"`
}
type ServerSendBean_PlayerJoinBean struct {
	PlayerJoinBean *PlagerJoinGameBean `protobuf:"bytes,7,opt,name=player_join_bean,oneof"`
}
type ServerSendBean_PlayerLevelBean struct {
	PlayerLevelBean *PlayerLeaveGameBean `protobuf:"bytes,8,opt,name=player_level_bean,oneof"`
}
type ServerSendBean_PlayerDeviceBean struct {
	PlayerDeviceBean *PlayerDeviceBean `protobuf:"bytes,9,opt,name=player_device_bean,oneof"`
}
type ServerSendBean_PlayerHorsesgameSpeedBean struct {
	PlayerHorsesgameSpeedBean *HorseSpeedBean `protobuf:"bytes,10,opt,name=player_horsesgame_speed_bean,oneof"`
}

func (*ServerSendBean_ResponseCreateroomBean) isServerSendBean_Bean()    {}
func (*ServerSendBean_ResponseJoinroomBean) isServerSendBean_Bean()      {}
func (*ServerSendBean_PlayerJoinBean) isServerSendBean_Bean()            {}
func (*ServerSendBean_PlayerLevelBean) isServerSendBean_Bean()           {}
func (*ServerSendBean_PlayerDeviceBean) isServerSendBean_Bean()          {}
func (*ServerSendBean_PlayerHorsesgameSpeedBean) isServerSendBean_Bean() {}

func (m *ServerSendBean) GetBean() isServerSendBean_Bean {
	if m != nil {
		return m.Bean
	}
	return nil
}

func (m *ServerSendBean) GetResponseCreateroomBean() *ServerResponseCreateRoomBean {
	if x, ok := m.GetBean().(*ServerSendBean_ResponseCreateroomBean); ok {
		return x.ResponseCreateroomBean
	}
	return nil
}

func (m *ServerSendBean) GetResponseJoinroomBean() *ServerResponseJoinRoomBean {
	if x, ok := m.GetBean().(*ServerSendBean_ResponseJoinroomBean); ok {
		return x.ResponseJoinroomBean
	}
	return nil
}

func (m *ServerSendBean) GetPlayerJoinBean() *PlagerJoinGameBean {
	if x, ok := m.GetBean().(*ServerSendBean_PlayerJoinBean); ok {
		return x.PlayerJoinBean
	}
	return nil
}

func (m *ServerSendBean) GetPlayerLevelBean() *PlayerLeaveGameBean {
	if x, ok := m.GetBean().(*ServerSendBean_PlayerLevelBean); ok {
		return x.PlayerLevelBean
	}
	return nil
}

func (m *ServerSendBean) GetPlayerDeviceBean() *PlayerDeviceBean {
	if x, ok := m.GetBean().(*ServerSendBean_PlayerDeviceBean); ok {
		return x.PlayerDeviceBean
	}
	return nil
}

func (m *ServerSendBean) GetPlayerHorsesgameSpeedBean() *HorseSpeedBean {
	if x, ok := m.GetBean().(*ServerSendBean_PlayerHorsesgameSpeedBean); ok {
		return x.PlayerHorsesgameSpeedBean
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerSendBean) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _ServerSendBean_OneofMarshaler, _ServerSendBean_OneofUnmarshaler, []interface{}{
		(*ServerSendBean_ResponseCreateroomBean)(nil),
		(*ServerSendBean_ResponseJoinroomBean)(nil),
		(*ServerSendBean_PlayerJoinBean)(nil),
		(*ServerSendBean_PlayerLevelBean)(nil),
		(*ServerSendBean_PlayerDeviceBean)(nil),
		(*ServerSendBean_PlayerHorsesgameSpeedBean)(nil),
	}
}

func _ServerSendBean_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerSendBean)
	// Bean
	switch x := m.Bean.(type) {
	case *ServerSendBean_ResponseCreateroomBean:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResponseCreateroomBean); err != nil {
			return err
		}
	case *ServerSendBean_ResponseJoinroomBean:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResponseJoinroomBean); err != nil {
			return err
		}
	case *ServerSendBean_PlayerJoinBean:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayerJoinBean); err != nil {
			return err
		}
	case *ServerSendBean_PlayerLevelBean:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayerLevelBean); err != nil {
			return err
		}
	case *ServerSendBean_PlayerDeviceBean:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayerDeviceBean); err != nil {
			return err
		}
	case *ServerSendBean_PlayerHorsesgameSpeedBean:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayerHorsesgameSpeedBean); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServerSendBean.Bean has unexpected type %T", x)
	}
	return nil
}

func _ServerSendBean_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerSendBean)
	switch tag {
	case 5: // Bean.response_createroom_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerResponseCreateRoomBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerSendBean_ResponseCreateroomBean{msg}
		return true, err
	case 6: // Bean.response_joinroom_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerResponseJoinRoomBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerSendBean_ResponseJoinroomBean{msg}
		return true, err
	case 7: // Bean.player_join_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlagerJoinGameBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerSendBean_PlayerJoinBean{msg}
		return true, err
	case 8: // Bean.player_level_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerLeaveGameBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerSendBean_PlayerLevelBean{msg}
		return true, err
	case 9: // Bean.player_device_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerDeviceBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerSendBean_PlayerDeviceBean{msg}
		return true, err
	case 10: // Bean.player_horsesgame_speed_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HorseSpeedBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerSendBean_PlayerHorsesgameSpeedBean{msg}
		return true, err
	default:
		return false, nil
	}
}

// *
// client -> server
// client向server发送的数据
type ClientRequestBean struct {
	RequestId  string               `protobuf:"bytes,1,opt,name=request_id,proto3" json:"request_id,omitempty"`
	OptionCode RequestOperationCode `protobuf:"varint,2,opt,name=option_code,proto3,enum=beans.RequestOperationCode" json:"option_code,omitempty"`
	// Types that are valid to be assigned to Bean:
	//	*ClientRequestBean_CreateroomBean
	//	*ClientRequestBean_JoinroomBean
	//	*ClientRequestBean_PlayerdeviceBean
	Bean isClientRequestBean_Bean `protobuf_oneof:"Bean"`
}

func (m *ClientRequestBean) Reset()         { *m = ClientRequestBean{} }
func (m *ClientRequestBean) String() string { return proto.CompactTextString(m) }
func (*ClientRequestBean) ProtoMessage()    {}

type isClientRequestBean_Bean interface {
	isClientRequestBean_Bean()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientRequestBean_CreateroomBean struct {
	CreateroomBean *CreateRoomBean `protobuf:"bytes,3,opt,name=createroom_bean,oneof"`
}
type ClientRequestBean_JoinroomBean struct {
	JoinroomBean *JoinRoomBean `protobuf:"bytes,4,opt,name=joinroom_bean,oneof"`
}
type ClientRequestBean_PlayerdeviceBean struct {
	PlayerdeviceBean *PlayerDeviceBean `protobuf:"bytes,5,opt,name=playerdevice_bean,oneof"`
}

func (*ClientRequestBean_CreateroomBean) isClientRequestBean_Bean()   {}
func (*ClientRequestBean_JoinroomBean) isClientRequestBean_Bean()     {}
func (*ClientRequestBean_PlayerdeviceBean) isClientRequestBean_Bean() {}

func (m *ClientRequestBean) GetBean() isClientRequestBean_Bean {
	if m != nil {
		return m.Bean
	}
	return nil
}

func (m *ClientRequestBean) GetCreateroomBean() *CreateRoomBean {
	if x, ok := m.GetBean().(*ClientRequestBean_CreateroomBean); ok {
		return x.CreateroomBean
	}
	return nil
}

func (m *ClientRequestBean) GetJoinroomBean() *JoinRoomBean {
	if x, ok := m.GetBean().(*ClientRequestBean_JoinroomBean); ok {
		return x.JoinroomBean
	}
	return nil
}

func (m *ClientRequestBean) GetPlayerdeviceBean() *PlayerDeviceBean {
	if x, ok := m.GetBean().(*ClientRequestBean_PlayerdeviceBean); ok {
		return x.PlayerdeviceBean
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientRequestBean) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _ClientRequestBean_OneofMarshaler, _ClientRequestBean_OneofUnmarshaler, []interface{}{
		(*ClientRequestBean_CreateroomBean)(nil),
		(*ClientRequestBean_JoinroomBean)(nil),
		(*ClientRequestBean_PlayerdeviceBean)(nil),
	}
}

func _ClientRequestBean_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientRequestBean)
	// Bean
	switch x := m.Bean.(type) {
	case *ClientRequestBean_CreateroomBean:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateroomBean); err != nil {
			return err
		}
	case *ClientRequestBean_JoinroomBean:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinroomBean); err != nil {
			return err
		}
	case *ClientRequestBean_PlayerdeviceBean:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayerdeviceBean); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClientRequestBean.Bean has unexpected type %T", x)
	}
	return nil
}

func _ClientRequestBean_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientRequestBean)
	switch tag {
	case 3: // Bean.createroom_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateRoomBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_CreateroomBean{msg}
		return true, err
	case 4: // Bean.joinroom_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRoomBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_JoinroomBean{msg}
		return true, err
	case 5: // Bean.playerdevice_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerDeviceBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_PlayerdeviceBean{msg}
		return true, err
	default:
		return false, nil
	}
}

func init() {
	proto.RegisterEnum("beans.RequestOperationCode", RequestOperationCode_name, RequestOperationCode_value)
	proto.RegisterEnum("beans.SendMessageOperationCode", SendMessageOperationCode_name, SendMessageOperationCode_value)
}
func (m *CreateRoomBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateRoomBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.GameId)))
		i += copy(data[i:], m.GameId)
	}
	if m.Longitude != 0 {
		data[i] = 0x11
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.Longitude)))
	}
	if m.Latitude != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.Latitude)))
	}
	if len(m.DeviceInfo) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.DeviceInfo)))
		i += copy(data[i:], m.DeviceInfo)
	}
	return i, nil
}

func (m *JoinRoomBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *JoinRoomBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.GameId)))
		i += copy(data[i:], m.GameId)
	}
	if len(m.PlayerTocken) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerTocken)))
		i += copy(data[i:], m.PlayerTocken)
	}
	if m.Longitude != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.Longitude)))
	}
	if m.Latitude != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.Latitude)))
	}
	if len(m.Ip) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.Ip)))
		i += copy(data[i:], m.Ip)
	}
	if len(m.DeviceInfo) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.DeviceInfo)))
		i += copy(data[i:], m.DeviceInfo)
	}
	return i, nil
}

func (m *PlayerDeviceBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PlayerDeviceBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AngleAlpha != 0 {
		data[i] = 0x9
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AngleAlpha)))
	}
	if m.AngleBeta != 0 {
		data[i] = 0x11
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AngleBeta)))
	}
	if m.AngleGamma != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AngleGamma)))
	}
	if m.AcceX != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AcceX)))
	}
	if m.AcceY != 0 {
		data[i] = 0x29
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AcceY)))
	}
	if m.AcceZ != 0 {
		data[i] = 0x31
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AcceZ)))
	}
	if m.AcceAlpha != 0 {
		data[i] = 0x39
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AcceAlpha)))
	}
	if m.AcceBeta != 0 {
		data[i] = 0x41
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AcceBeta)))
	}
	if m.AcceGamma != 0 {
		data[i] = 0x49
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.AcceGamma)))
	}
	if len(m.GameId) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.GameId)))
		i += copy(data[i:], m.GameId)
	}
	if len(m.PlayerId) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.RoomId) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	if len(m.PlayerName) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerName)))
		i += copy(data[i:], m.PlayerName)
	}
	return i, nil
}

func (m *PlagerJoinGameBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PlagerJoinGameBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.PlayerTocken) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerTocken)))
		i += copy(data[i:], m.PlayerTocken)
	}
	if len(m.PlayerName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerName)))
		i += copy(data[i:], m.PlayerName)
	}
	if m.PlayerLevel != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.PlayerLevel))
	}
	return i, nil
}

func (m *PlayerLeaveGameBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PlayerLeaveGameBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.PlayerName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerName)))
		i += copy(data[i:], m.PlayerName)
	}
	if m.PlayerLevel != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.PlayerLevel))
	}
	return i, nil
}

func (m *HorseSpeedBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HorseSpeedBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.PlayerName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerName)))
		i += copy(data[i:], m.PlayerName)
	}
	if m.PlayerLevel != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.PlayerLevel))
	}
	if m.PlayerSpeed != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64BeanHorse(data, i, uint64(math.Float64bits(m.PlayerSpeed)))
	}
	return i, nil
}

func (m *ServerResponseCreateRoomBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ServerResponseCreateRoomBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxCount != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.MaxCount))
	}
	if len(m.RoomId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	return i, nil
}

func (m *ServerResponseJoinRoomBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ServerResponseJoinRoomBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	if len(m.PlayerId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	return i, nil
}

func (m *ServerSendBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ServerSendBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResultCode) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.ResultCode)))
		i += copy(data[i:], m.ResultCode)
	}
	if len(m.RequestId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.RequestId)))
		i += copy(data[i:], m.RequestId)
	}
	if len(m.Desc) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.Desc)))
		i += copy(data[i:], m.Desc)
	}
	if m.OptionCode != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.OptionCode))
	}
	if m.Bean != nil {
		nn1, err := m.Bean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ServerSendBean_ResponseCreateroomBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.ResponseCreateroomBean != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.ResponseCreateroomBean.Size()))
		n2, err := m.ResponseCreateroomBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ServerSendBean_ResponseJoinroomBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.ResponseJoinroomBean != nil {
		data[i] = 0x32
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.ResponseJoinroomBean.Size()))
		n3, err := m.ResponseJoinroomBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ServerSendBean_PlayerJoinBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.PlayerJoinBean != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.PlayerJoinBean.Size()))
		n4, err := m.PlayerJoinBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ServerSendBean_PlayerLevelBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.PlayerLevelBean != nil {
		data[i] = 0x42
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.PlayerLevelBean.Size()))
		n5, err := m.PlayerLevelBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ServerSendBean_PlayerDeviceBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.PlayerDeviceBean != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.PlayerDeviceBean.Size()))
		n6, err := m.PlayerDeviceBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ServerSendBean_PlayerHorsesgameSpeedBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.PlayerHorsesgameSpeedBean != nil {
		data[i] = 0x52
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.PlayerHorsesgameSpeedBean.Size()))
		n7, err := m.PlayerHorsesgameSpeedBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ClientRequestBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClientRequestBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanHorse(data, i, uint64(len(m.RequestId)))
		i += copy(data[i:], m.RequestId)
	}
	if m.OptionCode != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.OptionCode))
	}
	if m.Bean != nil {
		nn8, err := m.Bean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *ClientRequestBean_CreateroomBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.CreateroomBean != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.CreateroomBean.Size()))
		n9, err := m.CreateroomBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *ClientRequestBean_JoinroomBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.JoinroomBean != nil {
		data[i] = 0x22
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.JoinroomBean.Size()))
		n10, err := m.JoinroomBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *ClientRequestBean_PlayerdeviceBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.PlayerdeviceBean != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintBeanHorse(data, i, uint64(m.PlayerdeviceBean.Size()))
		n11, err := m.PlayerdeviceBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func encodeFixed64BeanHorse(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BeanHorse(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBeanHorse(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *CreateRoomBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	l = len(m.DeviceInfo)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}

func (m *JoinRoomBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.PlayerTocken)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.DeviceInfo)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}

func (m *PlayerDeviceBean) Size() (n int) {
	var l int
	_ = l
	if m.AngleAlpha != 0 {
		n += 9
	}
	if m.AngleBeta != 0 {
		n += 9
	}
	if m.AngleGamma != 0 {
		n += 9
	}
	if m.AcceX != 0 {
		n += 9
	}
	if m.AcceY != 0 {
		n += 9
	}
	if m.AcceZ != 0 {
		n += 9
	}
	if m.AcceAlpha != 0 {
		n += 9
	}
	if m.AcceBeta != 0 {
		n += 9
	}
	if m.AcceGamma != 0 {
		n += 9
	}
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}

func (m *PlagerJoinGameBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.PlayerTocken)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	if m.PlayerLevel != 0 {
		n += 1 + sovBeanHorse(uint64(m.PlayerLevel))
	}
	return n
}

func (m *PlayerLeaveGameBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	if m.PlayerLevel != 0 {
		n += 1 + sovBeanHorse(uint64(m.PlayerLevel))
	}
	return n
}

func (m *HorseSpeedBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	if m.PlayerLevel != 0 {
		n += 1 + sovBeanHorse(uint64(m.PlayerLevel))
	}
	if m.PlayerSpeed != 0 {
		n += 9
	}
	return n
}

func (m *ServerResponseCreateRoomBean) Size() (n int) {
	var l int
	_ = l
	if m.MaxCount != 0 {
		n += 1 + sovBeanHorse(uint64(m.MaxCount))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}

func (m *ServerResponseJoinRoomBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}

func (m *ServerSendBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResultCode)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	if m.OptionCode != 0 {
		n += 1 + sovBeanHorse(uint64(m.OptionCode))
	}
	if m.Bean != nil {
		n += m.Bean.Size()
	}
	return n
}

func (m *ServerSendBean_ResponseCreateroomBean) Size() (n int) {
	var l int
	_ = l
	if m.ResponseCreateroomBean != nil {
		l = m.ResponseCreateroomBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}
func (m *ServerSendBean_ResponseJoinroomBean) Size() (n int) {
	var l int
	_ = l
	if m.ResponseJoinroomBean != nil {
		l = m.ResponseJoinroomBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}
func (m *ServerSendBean_PlayerJoinBean) Size() (n int) {
	var l int
	_ = l
	if m.PlayerJoinBean != nil {
		l = m.PlayerJoinBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}
func (m *ServerSendBean_PlayerLevelBean) Size() (n int) {
	var l int
	_ = l
	if m.PlayerLevelBean != nil {
		l = m.PlayerLevelBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}
func (m *ServerSendBean_PlayerDeviceBean) Size() (n int) {
	var l int
	_ = l
	if m.PlayerDeviceBean != nil {
		l = m.PlayerDeviceBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}
func (m *ServerSendBean_PlayerHorsesgameSpeedBean) Size() (n int) {
	var l int
	_ = l
	if m.PlayerHorsesgameSpeedBean != nil {
		l = m.PlayerHorsesgameSpeedBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}
func (m *ClientRequestBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	if m.OptionCode != 0 {
		n += 1 + sovBeanHorse(uint64(m.OptionCode))
	}
	if m.Bean != nil {
		n += m.Bean.Size()
	}
	return n
}

func (m *ClientRequestBean_CreateroomBean) Size() (n int) {
	var l int
	_ = l
	if m.CreateroomBean != nil {
		l = m.CreateroomBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}
func (m *ClientRequestBean_JoinroomBean) Size() (n int) {
	var l int
	_ = l
	if m.JoinroomBean != nil {
		l = m.JoinroomBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}
func (m *ClientRequestBean_PlayerdeviceBean) Size() (n int) {
	var l int
	_ = l
	if m.PlayerdeviceBean != nil {
		l = m.PlayerdeviceBean.Size()
		n += 1 + l + sovBeanHorse(uint64(l))
	}
	return n
}

func sovBeanHorse(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBeanHorse(x uint64) (n int) {
	return sovBeanHorse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateRoomBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoomBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoomBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Longitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Latitude = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceInfo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRoomBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRoomBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRoomBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerTocken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerTocken = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Longitude = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Latitude = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceInfo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDeviceBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDeviceBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDeviceBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AngleAlpha", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AngleAlpha = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AngleBeta", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AngleBeta = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AngleGamma", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AngleGamma = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceX", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AcceX = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceY", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AcceY = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceZ", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AcceZ = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceAlpha", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AcceAlpha = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceBeta", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AcceBeta = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceGamma", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.AcceGamma = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlagerJoinGameBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlagerJoinGameBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlagerJoinGameBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerTocken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerTocken = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevel", wireType)
			}
			m.PlayerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PlayerLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerLeaveGameBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLeaveGameBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLeaveGameBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevel", wireType)
			}
			m.PlayerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PlayerLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HorseSpeedBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HorseSpeedBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HorseSpeedBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevel", wireType)
			}
			m.PlayerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PlayerLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerSpeed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.PlayerSpeed = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerResponseCreateRoomBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerResponseCreateRoomBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerResponseCreateRoomBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			m.MaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerResponseJoinRoomBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerResponseJoinRoomBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerResponseJoinRoomBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerSendBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerSendBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerSendBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionCode", wireType)
			}
			m.OptionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OptionCode |= (SendMessageOperationCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCreateroomBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServerResponseCreateRoomBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerSendBean_ResponseCreateroomBean{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseJoinroomBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServerResponseJoinRoomBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerSendBean_ResponseJoinroomBean{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerJoinBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlagerJoinGameBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerSendBean_PlayerJoinBean{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevelBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayerLeaveGameBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerSendBean_PlayerLevelBean{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDeviceBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayerDeviceBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerSendBean_PlayerDeviceBean{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerHorsesgameSpeedBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HorseSpeedBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerSendBean_PlayerHorsesgameSpeedBean{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRequestBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRequestBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRequestBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionCode", wireType)
			}
			m.OptionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OptionCode |= (RequestOperationCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateroomBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateRoomBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_CreateroomBean{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinroomBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRoomBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_JoinroomBean{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerdeviceBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanHorse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayerDeviceBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_PlayerdeviceBean{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanHorse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanHorse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeanHorse(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeanHorse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeanHorse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBeanHorse
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBeanHorse
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBeanHorse(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBeanHorse = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeanHorse   = fmt.Errorf("proto: integer overflow")
)
