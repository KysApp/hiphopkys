// Code generated by protoc-gen-gogo.
// source: bean_doudizhu.proto
// DO NOT EDIT!

/*
	Package beans is a generated protocol buffer package.

	It is generated from these files:
		bean_doudizhu.proto

	It has these top-level messages:
		RequestApplyJoinRoomBean
		RequestFightDizhuBean
		RequestCardBean
		RequestOpenRobot
		RequestCloseRobot
		RequestReadyBean
		ResponseSendRoomID
		ResponsePlagerJoinGameBean
		ResponseCardBean
		ResponseSendCardBeanArray
		ResponseDefineDizhu
		ResponseBordcastOtherPlayerCard
		ServerResponseBean
		ClientRequestBean
*/
package beans

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// client -> server
type RequestOperationCode int32

const (
	RequestOperationCode_REQUEST_OPERATIONCODE_FIGHTDIZHU  RequestOperationCode = 0
	RequestOperationCode_REQUEST_OPERATIONCODE_CARD        RequestOperationCode = 1
	RequestOperationCode_REQUEST_OPERATIONCODE_JOINROOM    RequestOperationCode = 2
	RequestOperationCode_REQUEST_OPERATIONCODE_OPEN_ROBOT  RequestOperationCode = 3
	RequestOperationCode_REQUEST_OPERATIONCODE_CLOSE_ROBOT RequestOperationCode = 4
	RequestOperationCode_REQUEST_OPERATIONCODE_READY       RequestOperationCode = 5
)

var RequestOperationCode_name = map[int32]string{
	0: "REQUEST_OPERATIONCODE_FIGHTDIZHU",
	1: "REQUEST_OPERATIONCODE_CARD",
	2: "REQUEST_OPERATIONCODE_JOINROOM",
	3: "REQUEST_OPERATIONCODE_OPEN_ROBOT",
	4: "REQUEST_OPERATIONCODE_CLOSE_ROBOT",
	5: "REQUEST_OPERATIONCODE_READY",
}
var RequestOperationCode_value = map[string]int32{
	"REQUEST_OPERATIONCODE_FIGHTDIZHU":  0,
	"REQUEST_OPERATIONCODE_CARD":        1,
	"REQUEST_OPERATIONCODE_JOINROOM":    2,
	"REQUEST_OPERATIONCODE_OPEN_ROBOT":  3,
	"REQUEST_OPERATIONCODE_CLOSE_ROBOT": 4,
	"REQUEST_OPERATIONCODE_READY":       5,
}

func (x RequestOperationCode) String() string {
	return proto.EnumName(RequestOperationCode_name, int32(x))
}

// *
// server -> client
type ResponseOperationCode int32

const (
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_RESPONSE       ResponseOperationCode = 0
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_PLAYERJOINGAME ResponseOperationCode = 1
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_SENDCARD_CMD   ResponseOperationCode = 2
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_PREPARESTART   ResponseOperationCode = 3
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_CARD           ResponseOperationCode = 4
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_DIZHUDECIDE    ResponseOperationCode = 5
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_ROOMID         ResponseOperationCode = 6
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_CLEARN_CMD     ResponseOperationCode = 7
	ResponseOperationCode_SENDMESSAGE_OPERATIONCODE_RESTART        ResponseOperationCode = 8
)

var ResponseOperationCode_name = map[int32]string{
	0: "SENDMESSAGE_OPERATIONCODE_RESPONSE",
	1: "SENDMESSAGE_OPERATIONCODE_PLAYERJOINGAME",
	2: "SENDMESSAGE_OPERATIONCODE_SENDCARD_CMD",
	3: "SENDMESSAGE_OPERATIONCODE_PREPARESTART",
	4: "SENDMESSAGE_OPERATIONCODE_CARD",
	5: "SENDMESSAGE_OPERATIONCODE_DIZHUDECIDE",
	6: "SENDMESSAGE_OPERATIONCODE_ROOMID",
	7: "SENDMESSAGE_OPERATIONCODE_CLEARN_CMD",
	8: "SENDMESSAGE_OPERATIONCODE_RESTART",
}
var ResponseOperationCode_value = map[string]int32{
	"SENDMESSAGE_OPERATIONCODE_RESPONSE":       0,
	"SENDMESSAGE_OPERATIONCODE_PLAYERJOINGAME": 1,
	"SENDMESSAGE_OPERATIONCODE_SENDCARD_CMD":   2,
	"SENDMESSAGE_OPERATIONCODE_PREPARESTART":   3,
	"SENDMESSAGE_OPERATIONCODE_CARD":           4,
	"SENDMESSAGE_OPERATIONCODE_DIZHUDECIDE":    5,
	"SENDMESSAGE_OPERATIONCODE_ROOMID":         6,
	"SENDMESSAGE_OPERATIONCODE_CLEARN_CMD":     7,
	"SENDMESSAGE_OPERATIONCODE_RESTART":        8,
}

func (x ResponseOperationCode) String() string {
	return proto.EnumName(ResponseOperationCode_name, int32(x))
}

// *
// client -> server
// 申请加入房间
type RequestApplyJoinRoomBean struct {
	PlayerTocken string `protobuf:"bytes,1,opt,name=player_tocken,proto3" json:"player_tocken,omitempty"`
	DeviceInfo   string `protobuf:"bytes,2,opt,name=device_info,proto3" json:"device_info,omitempty"`
}

func (m *RequestApplyJoinRoomBean) Reset()         { *m = RequestApplyJoinRoomBean{} }
func (m *RequestApplyJoinRoomBean) String() string { return proto.CompactTextString(m) }
func (*RequestApplyJoinRoomBean) ProtoMessage()    {}

// *
// client -> server
// 抢地主
type RequestFightDizhuBean struct {
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=room_id,proto3" json:"room_id,omitempty"`
	IsDizhu  bool   `protobuf:"varint,3,opt,name=is_dizhu,proto3" json:"is_dizhu,omitempty"`
}

func (m *RequestFightDizhuBean) Reset()         { *m = RequestFightDizhuBean{} }
func (m *RequestFightDizhuBean) String() string { return proto.CompactTextString(m) }
func (*RequestFightDizhuBean) ProtoMessage()    {}

// *
// client -> server
// 出牌
type RequestCardBean struct {
	PlayerId    string   `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	CardIdArray []string `protobuf:"bytes,2,rep,name=card_id_array" json:"card_id_array,omitempty"`
	RoomId      string   `protobuf:"bytes,3,opt,name=room_id,proto3" json:"room_id,omitempty"`
	Remainder   int32    `protobuf:"varint,4,opt,name=remainder,proto3" json:"remainder,omitempty"`
}

func (m *RequestCardBean) Reset()         { *m = RequestCardBean{} }
func (m *RequestCardBean) String() string { return proto.CompactTextString(m) }
func (*RequestCardBean) ProtoMessage()    {}

// *
// client -> server
// 开启机器模式
type RequestOpenRobot struct {
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=room_id,proto3" json:"room_id,omitempty"`
}

func (m *RequestOpenRobot) Reset()         { *m = RequestOpenRobot{} }
func (m *RequestOpenRobot) String() string { return proto.CompactTextString(m) }
func (*RequestOpenRobot) ProtoMessage()    {}

// *
// client -> server
// 关闭机器模式
type RequestCloseRobot struct {
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=room_id,proto3" json:"room_id,omitempty"`
}

func (m *RequestCloseRobot) Reset()         { *m = RequestCloseRobot{} }
func (m *RequestCloseRobot) String() string { return proto.CompactTextString(m) }
func (*RequestCloseRobot) ProtoMessage()    {}

// *
// client -> server
// 一局游戏结束后完成清理工作后,向server发送表示准备好新一轮游戏
type RequestReadyBean struct {
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=room_id,proto3" json:"room_id,omitempty"`
}

func (m *RequestReadyBean) Reset()         { *m = RequestReadyBean{} }
func (m *RequestReadyBean) String() string { return proto.CompactTextString(m) }
func (*RequestReadyBean) ProtoMessage()    {}

// *
// server -> client
// player加入房间以后返回房间id
type ResponseSendRoomID struct {
	RoomId string `protobuf:"bytes,1,opt,name=room_id,proto3" json:"room_id,omitempty"`
}

func (m *ResponseSendRoomID) Reset()         { *m = ResponseSendRoomID{} }
func (m *ResponseSendRoomID) String() string { return proto.CompactTextString(m) }
func (*ResponseSendRoomID) ProtoMessage()    {}

// *
// server -> client
// player_client加入游戏后，server向game_client发送的新加入的player_client的信息
type ResponsePlagerJoinGameBean struct {
	PlayerId    string `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	PlayerName  string `protobuf:"bytes,2,opt,name=player_name,proto3" json:"player_name,omitempty"`
	PlayerLevel int32  `protobuf:"varint,3,opt,name=player_level,proto3" json:"player_level,omitempty"`
}

func (m *ResponsePlagerJoinGameBean) Reset()         { *m = ResponsePlagerJoinGameBean{} }
func (m *ResponsePlagerJoinGameBean) String() string { return proto.CompactTextString(m) }
func (*ResponsePlagerJoinGameBean) ProtoMessage()    {}

// *
// server -> client
//
type ResponseCardBean struct {
	PlayerId    string   `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	CardIdArray []string `protobuf:"bytes,2,rep,name=card_id_array" json:"card_id_array,omitempty"`
}

func (m *ResponseCardBean) Reset()         { *m = ResponseCardBean{} }
func (m *ResponseCardBean) String() string { return proto.CompactTextString(m) }
func (*ResponseCardBean) ProtoMessage()    {}

// *
// server -> client
// 人满,开始发牌(每个玩家的牌由服务器生成)
type ResponseSendCardBeanArray struct {
	CardBeanArray []*ResponseCardBean `protobuf:"bytes,1,rep,name=card_bean_array" json:"card_bean_array,omitempty"`
}

func (m *ResponseSendCardBeanArray) Reset()         { *m = ResponseSendCardBeanArray{} }
func (m *ResponseSendCardBeanArray) String() string { return proto.CompactTextString(m) }
func (*ResponseSendCardBeanArray) ProtoMessage()    {}

func (m *ResponseSendCardBeanArray) GetCardBeanArray() []*ResponseCardBean {
	if m != nil {
		return m.CardBeanArray
	}
	return nil
}

// *
// server -> client
// 客户端发起抢地主请求后,server确定谁是地主,将地主玩家id发送给每个客户端（这里只抢一轮，如果只有一个人抢则此人为地主，若不止一人则server随机选一个）
type ResponseDefineDizhu struct {
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
}

func (m *ResponseDefineDizhu) Reset()         { *m = ResponseDefineDizhu{} }
func (m *ResponseDefineDizhu) String() string { return proto.CompactTextString(m) }
func (*ResponseDefineDizhu) ProtoMessage()    {}

// *
// server -> client
// server向client发送其他玩家出牌
type ResponseBordcastOtherPlayerCard struct {
	PlayerId    string   `protobuf:"bytes,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	CardIdArray []string `protobuf:"bytes,2,rep,name=card_id_array" json:"card_id_array,omitempty"`
	Remainder   int32    `protobuf:"varint,3,opt,name=remainder,proto3" json:"remainder,omitempty"`
}

func (m *ResponseBordcastOtherPlayerCard) Reset()         { *m = ResponseBordcastOtherPlayerCard{} }
func (m *ResponseBordcastOtherPlayerCard) String() string { return proto.CompactTextString(m) }
func (*ResponseBordcastOtherPlayerCard) ProtoMessage()    {}

// *
// server -> client
// server向client发送的数据(响应，玩家加入与离开，玩家陀螺仪数据等)
type ServerResponseBean struct {
	ErrorCode  int32                 `protobuf:"varint,1,opt,name=error_code,proto3" json:"error_code,omitempty"`
	RequestId  string                `protobuf:"bytes,2,opt,name=request_id,proto3" json:"request_id,omitempty"`
	Desc       string                `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	OptionCode ResponseOperationCode `protobuf:"varint,4,opt,name=option_code,proto3,enum=beans.ResponseOperationCode" json:"option_code,omitempty"`
	// Types that are valid to be assigned to Bean:
	//	*ServerResponseBean_SendRoomIdBean
	//	*ServerResponseBean_PlayerJoinBean
	//	*ServerResponseBean_CardArrayBean
	//	*ServerResponseBean_DizhuBean
	//	*ServerResponseBean_OtherCards
	Bean isServerResponseBean_Bean `protobuf_oneof:"Bean"`
}

func (m *ServerResponseBean) Reset()         { *m = ServerResponseBean{} }
func (m *ServerResponseBean) String() string { return proto.CompactTextString(m) }
func (*ServerResponseBean) ProtoMessage()    {}

type isServerResponseBean_Bean interface {
	isServerResponseBean_Bean()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServerResponseBean_SendRoomIdBean struct {
	SendRoomIdBean *ResponseSendRoomID `protobuf:"bytes,5,opt,name=send_room_id_bean,oneof"`
}
type ServerResponseBean_PlayerJoinBean struct {
	PlayerJoinBean *ResponsePlagerJoinGameBean `protobuf:"bytes,6,opt,name=player_join_bean,oneof"`
}
type ServerResponseBean_CardArrayBean struct {
	CardArrayBean *ResponseSendCardBeanArray `protobuf:"bytes,7,opt,name=card_array_bean,oneof"`
}
type ServerResponseBean_DizhuBean struct {
	DizhuBean *ResponseDefineDizhu `protobuf:"bytes,8,opt,name=dizhu_bean,oneof"`
}
type ServerResponseBean_OtherCards struct {
	OtherCards *ResponseBordcastOtherPlayerCard `protobuf:"bytes,9,opt,name=other_cards,oneof"`
}

func (*ServerResponseBean_SendRoomIdBean) isServerResponseBean_Bean() {}
func (*ServerResponseBean_PlayerJoinBean) isServerResponseBean_Bean() {}
func (*ServerResponseBean_CardArrayBean) isServerResponseBean_Bean()  {}
func (*ServerResponseBean_DizhuBean) isServerResponseBean_Bean()      {}
func (*ServerResponseBean_OtherCards) isServerResponseBean_Bean()     {}

func (m *ServerResponseBean) GetBean() isServerResponseBean_Bean {
	if m != nil {
		return m.Bean
	}
	return nil
}

func (m *ServerResponseBean) GetSendRoomIdBean() *ResponseSendRoomID {
	if x, ok := m.GetBean().(*ServerResponseBean_SendRoomIdBean); ok {
		return x.SendRoomIdBean
	}
	return nil
}

func (m *ServerResponseBean) GetPlayerJoinBean() *ResponsePlagerJoinGameBean {
	if x, ok := m.GetBean().(*ServerResponseBean_PlayerJoinBean); ok {
		return x.PlayerJoinBean
	}
	return nil
}

func (m *ServerResponseBean) GetCardArrayBean() *ResponseSendCardBeanArray {
	if x, ok := m.GetBean().(*ServerResponseBean_CardArrayBean); ok {
		return x.CardArrayBean
	}
	return nil
}

func (m *ServerResponseBean) GetDizhuBean() *ResponseDefineDizhu {
	if x, ok := m.GetBean().(*ServerResponseBean_DizhuBean); ok {
		return x.DizhuBean
	}
	return nil
}

func (m *ServerResponseBean) GetOtherCards() *ResponseBordcastOtherPlayerCard {
	if x, ok := m.GetBean().(*ServerResponseBean_OtherCards); ok {
		return x.OtherCards
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerResponseBean) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _ServerResponseBean_OneofMarshaler, _ServerResponseBean_OneofUnmarshaler, []interface{}{
		(*ServerResponseBean_SendRoomIdBean)(nil),
		(*ServerResponseBean_PlayerJoinBean)(nil),
		(*ServerResponseBean_CardArrayBean)(nil),
		(*ServerResponseBean_DizhuBean)(nil),
		(*ServerResponseBean_OtherCards)(nil),
	}
}

func _ServerResponseBean_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerResponseBean)
	// Bean
	switch x := m.Bean.(type) {
	case *ServerResponseBean_SendRoomIdBean:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendRoomIdBean); err != nil {
			return err
		}
	case *ServerResponseBean_PlayerJoinBean:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayerJoinBean); err != nil {
			return err
		}
	case *ServerResponseBean_CardArrayBean:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CardArrayBean); err != nil {
			return err
		}
	case *ServerResponseBean_DizhuBean:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DizhuBean); err != nil {
			return err
		}
	case *ServerResponseBean_OtherCards:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OtherCards); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServerResponseBean.Bean has unexpected type %T", x)
	}
	return nil
}

func _ServerResponseBean_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerResponseBean)
	switch tag {
	case 5: // Bean.send_room_id_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseSendRoomID)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerResponseBean_SendRoomIdBean{msg}
		return true, err
	case 6: // Bean.player_join_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponsePlagerJoinGameBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerResponseBean_PlayerJoinBean{msg}
		return true, err
	case 7: // Bean.card_array_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseSendCardBeanArray)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerResponseBean_CardArrayBean{msg}
		return true, err
	case 8: // Bean.dizhu_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseDefineDizhu)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerResponseBean_DizhuBean{msg}
		return true, err
	case 9: // Bean.other_cards
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBordcastOtherPlayerCard)
		err := b.DecodeMessage(msg)
		m.Bean = &ServerResponseBean_OtherCards{msg}
		return true, err
	default:
		return false, nil
	}
}

// *
// client -> server
// client向server发送的数据
type ClientRequestBean struct {
	RequestId  string               `protobuf:"bytes,1,opt,name=request_id,proto3" json:"request_id,omitempty"`
	OptionCode RequestOperationCode `protobuf:"varint,2,opt,name=option_code,proto3,enum=beans.RequestOperationCode" json:"option_code,omitempty"`
	// Types that are valid to be assigned to Bean:
	//	*ClientRequestBean_JoinRoomBean
	//	*ClientRequestBean_FightDizhuBean
	//	*ClientRequestBean_SendCardBean
	//	*ClientRequestBean_OpenRobotBean
	//	*ClientRequestBean_CloseRobotBean
	//	*ClientRequestBean_ReadyBean
	Bean isClientRequestBean_Bean `protobuf_oneof:"Bean"`
}

func (m *ClientRequestBean) Reset()         { *m = ClientRequestBean{} }
func (m *ClientRequestBean) String() string { return proto.CompactTextString(m) }
func (*ClientRequestBean) ProtoMessage()    {}

type isClientRequestBean_Bean interface {
	isClientRequestBean_Bean()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientRequestBean_JoinRoomBean struct {
	JoinRoomBean *RequestApplyJoinRoomBean `protobuf:"bytes,3,opt,name=join_room_bean,oneof"`
}
type ClientRequestBean_FightDizhuBean struct {
	FightDizhuBean *RequestFightDizhuBean `protobuf:"bytes,4,opt,name=fight_dizhu_bean,oneof"`
}
type ClientRequestBean_SendCardBean struct {
	SendCardBean *RequestCardBean `protobuf:"bytes,5,opt,name=send_card_bean,oneof"`
}
type ClientRequestBean_OpenRobotBean struct {
	OpenRobotBean *RequestOpenRobot `protobuf:"bytes,6,opt,name=open_robot_bean,oneof"`
}
type ClientRequestBean_CloseRobotBean struct {
	CloseRobotBean *RequestCloseRobot `protobuf:"bytes,7,opt,name=close_robot_bean,oneof"`
}
type ClientRequestBean_ReadyBean struct {
	ReadyBean *RequestReadyBean `protobuf:"bytes,8,opt,name=ready_bean,oneof"`
}

func (*ClientRequestBean_JoinRoomBean) isClientRequestBean_Bean()   {}
func (*ClientRequestBean_FightDizhuBean) isClientRequestBean_Bean() {}
func (*ClientRequestBean_SendCardBean) isClientRequestBean_Bean()   {}
func (*ClientRequestBean_OpenRobotBean) isClientRequestBean_Bean()  {}
func (*ClientRequestBean_CloseRobotBean) isClientRequestBean_Bean() {}
func (*ClientRequestBean_ReadyBean) isClientRequestBean_Bean()      {}

func (m *ClientRequestBean) GetBean() isClientRequestBean_Bean {
	if m != nil {
		return m.Bean
	}
	return nil
}

func (m *ClientRequestBean) GetJoinRoomBean() *RequestApplyJoinRoomBean {
	if x, ok := m.GetBean().(*ClientRequestBean_JoinRoomBean); ok {
		return x.JoinRoomBean
	}
	return nil
}

func (m *ClientRequestBean) GetFightDizhuBean() *RequestFightDizhuBean {
	if x, ok := m.GetBean().(*ClientRequestBean_FightDizhuBean); ok {
		return x.FightDizhuBean
	}
	return nil
}

func (m *ClientRequestBean) GetSendCardBean() *RequestCardBean {
	if x, ok := m.GetBean().(*ClientRequestBean_SendCardBean); ok {
		return x.SendCardBean
	}
	return nil
}

func (m *ClientRequestBean) GetOpenRobotBean() *RequestOpenRobot {
	if x, ok := m.GetBean().(*ClientRequestBean_OpenRobotBean); ok {
		return x.OpenRobotBean
	}
	return nil
}

func (m *ClientRequestBean) GetCloseRobotBean() *RequestCloseRobot {
	if x, ok := m.GetBean().(*ClientRequestBean_CloseRobotBean); ok {
		return x.CloseRobotBean
	}
	return nil
}

func (m *ClientRequestBean) GetReadyBean() *RequestReadyBean {
	if x, ok := m.GetBean().(*ClientRequestBean_ReadyBean); ok {
		return x.ReadyBean
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientRequestBean) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _ClientRequestBean_OneofMarshaler, _ClientRequestBean_OneofUnmarshaler, []interface{}{
		(*ClientRequestBean_JoinRoomBean)(nil),
		(*ClientRequestBean_FightDizhuBean)(nil),
		(*ClientRequestBean_SendCardBean)(nil),
		(*ClientRequestBean_OpenRobotBean)(nil),
		(*ClientRequestBean_CloseRobotBean)(nil),
		(*ClientRequestBean_ReadyBean)(nil),
	}
}

func _ClientRequestBean_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientRequestBean)
	// Bean
	switch x := m.Bean.(type) {
	case *ClientRequestBean_JoinRoomBean:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRoomBean); err != nil {
			return err
		}
	case *ClientRequestBean_FightDizhuBean:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FightDizhuBean); err != nil {
			return err
		}
	case *ClientRequestBean_SendCardBean:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendCardBean); err != nil {
			return err
		}
	case *ClientRequestBean_OpenRobotBean:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpenRobotBean); err != nil {
			return err
		}
	case *ClientRequestBean_CloseRobotBean:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloseRobotBean); err != nil {
			return err
		}
	case *ClientRequestBean_ReadyBean:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReadyBean); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClientRequestBean.Bean has unexpected type %T", x)
	}
	return nil
}

func _ClientRequestBean_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientRequestBean)
	switch tag {
	case 3: // Bean.join_room_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestApplyJoinRoomBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_JoinRoomBean{msg}
		return true, err
	case 4: // Bean.fight_dizhu_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestFightDizhuBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_FightDizhuBean{msg}
		return true, err
	case 5: // Bean.send_card_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCardBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_SendCardBean{msg}
		return true, err
	case 6: // Bean.open_robot_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestOpenRobot)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_OpenRobotBean{msg}
		return true, err
	case 7: // Bean.close_robot_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCloseRobot)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_CloseRobotBean{msg}
		return true, err
	case 8: // Bean.ready_bean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestReadyBean)
		err := b.DecodeMessage(msg)
		m.Bean = &ClientRequestBean_ReadyBean{msg}
		return true, err
	default:
		return false, nil
	}
}

func init() {
	proto.RegisterEnum("beans.RequestOperationCode", RequestOperationCode_name, RequestOperationCode_value)
	proto.RegisterEnum("beans.ResponseOperationCode", ResponseOperationCode_name, ResponseOperationCode_value)
}
func (m *RequestApplyJoinRoomBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestApplyJoinRoomBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerTocken) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerTocken)))
		i += copy(data[i:], m.PlayerTocken)
	}
	if len(m.DeviceInfo) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.DeviceInfo)))
		i += copy(data[i:], m.DeviceInfo)
	}
	return i, nil
}

func (m *RequestFightDizhuBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestFightDizhuBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.RoomId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	if m.IsDizhu {
		data[i] = 0x18
		i++
		if m.IsDizhu {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestCardBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestCardBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.CardIdArray) > 0 {
		for _, s := range m.CardIdArray {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.RoomId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	if m.Remainder != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.Remainder))
	}
	return i, nil
}

func (m *RequestOpenRobot) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestOpenRobot) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.RoomId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	return i, nil
}

func (m *RequestCloseRobot) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestCloseRobot) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.RoomId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	return i, nil
}

func (m *RequestReadyBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestReadyBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.RoomId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	return i, nil
}

func (m *ResponseSendRoomID) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseSendRoomID) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.RoomId)))
		i += copy(data[i:], m.RoomId)
	}
	return i, nil
}

func (m *ResponsePlagerJoinGameBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponsePlagerJoinGameBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.PlayerName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerName)))
		i += copy(data[i:], m.PlayerName)
	}
	if m.PlayerLevel != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.PlayerLevel))
	}
	return i, nil
}

func (m *ResponseCardBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseCardBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.CardIdArray) > 0 {
		for _, s := range m.CardIdArray {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *ResponseSendCardBeanArray) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseSendCardBeanArray) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CardBeanArray) > 0 {
		for _, msg := range m.CardBeanArray {
			data[i] = 0xa
			i++
			i = encodeVarintBeanDoudizhu(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseDefineDizhu) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseDefineDizhu) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	return i, nil
}

func (m *ResponseBordcastOtherPlayerCard) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseBordcastOtherPlayerCard) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.PlayerId)))
		i += copy(data[i:], m.PlayerId)
	}
	if len(m.CardIdArray) > 0 {
		for _, s := range m.CardIdArray {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Remainder != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.Remainder))
	}
	return i, nil
}

func (m *ServerResponseBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ServerResponseBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.ErrorCode))
	}
	if len(m.RequestId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.RequestId)))
		i += copy(data[i:], m.RequestId)
	}
	if len(m.Desc) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.Desc)))
		i += copy(data[i:], m.Desc)
	}
	if m.OptionCode != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.OptionCode))
	}
	if m.Bean != nil {
		nn1, err := m.Bean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ServerResponseBean_SendRoomIdBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SendRoomIdBean != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.SendRoomIdBean.Size()))
		n2, err := m.SendRoomIdBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ServerResponseBean_PlayerJoinBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.PlayerJoinBean != nil {
		data[i] = 0x32
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.PlayerJoinBean.Size()))
		n3, err := m.PlayerJoinBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ServerResponseBean_CardArrayBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.CardArrayBean != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.CardArrayBean.Size()))
		n4, err := m.CardArrayBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ServerResponseBean_DizhuBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.DizhuBean != nil {
		data[i] = 0x42
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.DizhuBean.Size()))
		n5, err := m.DizhuBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ServerResponseBean_OtherCards) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.OtherCards != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.OtherCards.Size()))
		n6, err := m.OtherCards.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ClientRequestBean) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClientRequestBean) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(len(m.RequestId)))
		i += copy(data[i:], m.RequestId)
	}
	if m.OptionCode != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.OptionCode))
	}
	if m.Bean != nil {
		nn7, err := m.Bean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *ClientRequestBean_JoinRoomBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.JoinRoomBean != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.JoinRoomBean.Size()))
		n8, err := m.JoinRoomBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ClientRequestBean_FightDizhuBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.FightDizhuBean != nil {
		data[i] = 0x22
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.FightDizhuBean.Size()))
		n9, err := m.FightDizhuBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *ClientRequestBean_SendCardBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SendCardBean != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.SendCardBean.Size()))
		n10, err := m.SendCardBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *ClientRequestBean_OpenRobotBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.OpenRobotBean != nil {
		data[i] = 0x32
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.OpenRobotBean.Size()))
		n11, err := m.OpenRobotBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *ClientRequestBean_CloseRobotBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.CloseRobotBean != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.CloseRobotBean.Size()))
		n12, err := m.CloseRobotBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *ClientRequestBean_ReadyBean) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.ReadyBean != nil {
		data[i] = 0x42
		i++
		i = encodeVarintBeanDoudizhu(data, i, uint64(m.ReadyBean.Size()))
		n13, err := m.ReadyBean.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func encodeFixed64BeanDoudizhu(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BeanDoudizhu(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBeanDoudizhu(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RequestApplyJoinRoomBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerTocken)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	l = len(m.DeviceInfo)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}

func (m *RequestFightDizhuBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	if m.IsDizhu {
		n += 2
	}
	return n
}

func (m *RequestCardBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	if len(m.CardIdArray) > 0 {
		for _, s := range m.CardIdArray {
			l = len(s)
			n += 1 + l + sovBeanDoudizhu(uint64(l))
		}
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	if m.Remainder != 0 {
		n += 1 + sovBeanDoudizhu(uint64(m.Remainder))
	}
	return n
}

func (m *RequestOpenRobot) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}

func (m *RequestCloseRobot) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}

func (m *RequestReadyBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}

func (m *ResponseSendRoomID) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}

func (m *ResponsePlagerJoinGameBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	if m.PlayerLevel != 0 {
		n += 1 + sovBeanDoudizhu(uint64(m.PlayerLevel))
	}
	return n
}

func (m *ResponseCardBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	if len(m.CardIdArray) > 0 {
		for _, s := range m.CardIdArray {
			l = len(s)
			n += 1 + l + sovBeanDoudizhu(uint64(l))
		}
	}
	return n
}

func (m *ResponseSendCardBeanArray) Size() (n int) {
	var l int
	_ = l
	if len(m.CardBeanArray) > 0 {
		for _, e := range m.CardBeanArray {
			l = e.Size()
			n += 1 + l + sovBeanDoudizhu(uint64(l))
		}
	}
	return n
}

func (m *ResponseDefineDizhu) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}

func (m *ResponseBordcastOtherPlayerCard) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	if len(m.CardIdArray) > 0 {
		for _, s := range m.CardIdArray {
			l = len(s)
			n += 1 + l + sovBeanDoudizhu(uint64(l))
		}
	}
	if m.Remainder != 0 {
		n += 1 + sovBeanDoudizhu(uint64(m.Remainder))
	}
	return n
}

func (m *ServerResponseBean) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovBeanDoudizhu(uint64(m.ErrorCode))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	if m.OptionCode != 0 {
		n += 1 + sovBeanDoudizhu(uint64(m.OptionCode))
	}
	if m.Bean != nil {
		n += m.Bean.Size()
	}
	return n
}

func (m *ServerResponseBean_SendRoomIdBean) Size() (n int) {
	var l int
	_ = l
	if m.SendRoomIdBean != nil {
		l = m.SendRoomIdBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ServerResponseBean_PlayerJoinBean) Size() (n int) {
	var l int
	_ = l
	if m.PlayerJoinBean != nil {
		l = m.PlayerJoinBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ServerResponseBean_CardArrayBean) Size() (n int) {
	var l int
	_ = l
	if m.CardArrayBean != nil {
		l = m.CardArrayBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ServerResponseBean_DizhuBean) Size() (n int) {
	var l int
	_ = l
	if m.DizhuBean != nil {
		l = m.DizhuBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ServerResponseBean_OtherCards) Size() (n int) {
	var l int
	_ = l
	if m.OtherCards != nil {
		l = m.OtherCards.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ClientRequestBean) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	if m.OptionCode != 0 {
		n += 1 + sovBeanDoudizhu(uint64(m.OptionCode))
	}
	if m.Bean != nil {
		n += m.Bean.Size()
	}
	return n
}

func (m *ClientRequestBean_JoinRoomBean) Size() (n int) {
	var l int
	_ = l
	if m.JoinRoomBean != nil {
		l = m.JoinRoomBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ClientRequestBean_FightDizhuBean) Size() (n int) {
	var l int
	_ = l
	if m.FightDizhuBean != nil {
		l = m.FightDizhuBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ClientRequestBean_SendCardBean) Size() (n int) {
	var l int
	_ = l
	if m.SendCardBean != nil {
		l = m.SendCardBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ClientRequestBean_OpenRobotBean) Size() (n int) {
	var l int
	_ = l
	if m.OpenRobotBean != nil {
		l = m.OpenRobotBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ClientRequestBean_CloseRobotBean) Size() (n int) {
	var l int
	_ = l
	if m.CloseRobotBean != nil {
		l = m.CloseRobotBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}
func (m *ClientRequestBean_ReadyBean) Size() (n int) {
	var l int
	_ = l
	if m.ReadyBean != nil {
		l = m.ReadyBean.Size()
		n += 1 + l + sovBeanDoudizhu(uint64(l))
	}
	return n
}

func sovBeanDoudizhu(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBeanDoudizhu(x uint64) (n int) {
	return sovBeanDoudizhu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestApplyJoinRoomBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestApplyJoinRoomBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestApplyJoinRoomBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerTocken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerTocken = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceInfo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFightDizhuBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFightDizhuBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFightDizhuBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDizhu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDizhu = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCardBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCardBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCardBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIdArray", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardIdArray = append(m.CardIdArray, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remainder", wireType)
			}
			m.Remainder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Remainder |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestOpenRobot) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestOpenRobot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestOpenRobot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCloseRobot) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCloseRobot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCloseRobot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestReadyBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestReadyBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestReadyBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSendRoomID) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSendRoomID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSendRoomID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponsePlagerJoinGameBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponsePlagerJoinGameBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponsePlagerJoinGameBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevel", wireType)
			}
			m.PlayerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PlayerLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseCardBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseCardBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseCardBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIdArray", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardIdArray = append(m.CardIdArray, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSendCardBeanArray) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSendCardBeanArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSendCardBeanArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardBeanArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardBeanArray = append(m.CardBeanArray, &ResponseCardBean{})
			if err := m.CardBeanArray[len(m.CardBeanArray)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDefineDizhu) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDefineDizhu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDefineDizhu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBordcastOtherPlayerCard) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBordcastOtherPlayerCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBordcastOtherPlayerCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIdArray", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardIdArray = append(m.CardIdArray, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remainder", wireType)
			}
			m.Remainder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Remainder |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerResponseBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerResponseBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerResponseBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionCode", wireType)
			}
			m.OptionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OptionCode |= (ResponseOperationCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRoomIdBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseSendRoomID{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerResponseBean_SendRoomIdBean{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerJoinBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponsePlagerJoinGameBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerResponseBean_PlayerJoinBean{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardArrayBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseSendCardBeanArray{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerResponseBean_CardArrayBean{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DizhuBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseDefineDizhu{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerResponseBean_DizhuBean{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBordcastOtherPlayerCard{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ServerResponseBean_OtherCards{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRequestBean) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRequestBean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRequestBean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionCode", wireType)
			}
			m.OptionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OptionCode |= (RequestOperationCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRoomBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestApplyJoinRoomBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_JoinRoomBean{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightDizhuBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestFightDizhuBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_FightDizhuBean{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendCardBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCardBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_SendCardBean{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenRobotBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestOpenRobot{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_OpenRobotBean{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseRobotBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCloseRobot{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_CloseRobotBean{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyBean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestReadyBean{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Bean = &ClientRequestBean_ReadyBean{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeanDoudizhu(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeanDoudizhu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeanDoudizhu(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeanDoudizhu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeanDoudizhu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBeanDoudizhu
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBeanDoudizhu
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBeanDoudizhu(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBeanDoudizhu = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeanDoudizhu   = fmt.Errorf("proto: integer overflow")
)
